{"version":3,"sources":["db.ts"],"names":["WebchatDb","constructor","bp","users","knex","batchSize","isLite","setInterval","flush","flushMessages","flushConvoUpdates","messagePromise","batchedMessages","length","batchCount","elements","splice","batchInsert","map","x","_","omit","catch","err","logger","attachError","error","elementsToRetry","retry","filter","MAX_RETRY_ATTEMPTS","push","finally","undefined","convoPromise","Object","keys","batchedConvos","transaction","trx","queries","key","conversationId","userId","botId","split","value","query","where","id","update","last_heard_on","transacting","Promise","all","then","commit","rollback","getUserInfo","user","getOrCreateUser","result","fullName","attributes","first_name","last_name","trim","avatar_url","get","initialize","createTableIfNotExists","table","increments","primary","string","timestamp","integer","text","jsonb","appendUserMessage","payload","incomingEventId","type","raw","data","now","Date","message","uuid","v4","full_name","message_type","message_text","message_raw","json","set","message_data","sent_on","date","format","appendBotMessage","botName","botAvatar","createConversation","originatesFromUserMessage","uid","Math","random","toString","substr","title","insert","created_on","conversation","select","getOrCreateRecentConversation","config","getModuleConfigForBot","recentCondition","isAfter","subtract","recentConversationLifetime","toDate","whereNotNull","andWhere","orderBy","limit","listConversations","conversations","conversationIds","c","lastMessages","from","distinct","lastMessagesDate","whereIn","groupBy","as","leftJoin","getConversation","condition","messages","getConversationMessages","maxMessagesHistory","forEach","m","assign","fromId","whereNot","getFeedbackInfoForEventIds","target","eventIds","direction"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;;;;;AAMe,MAAMA,SAAN,CAAgB;AAU7BC,EAAAA,WAAW,CAASC,EAAT,EAAyB;AAAA,SAAhBA,EAAgB,GAAhBA,EAAgB;;AAAA,gDATE,CASF;;AAAA;;AAAA;;AAAA,6CANG,EAMH;;AAAA,2CALG,EAKH;;AAAA;;AAAA;;AAAA;;AAClC,SAAKC,KAAL,GAAaD,EAAE,CAACC,KAAhB;AACA,SAAKC,IAAL,GAAYF,EAAE,CAAC,UAAD,CAAd,CAFkC,CAEP;;AAE3B,SAAKG,SAAL,GAAiB,KAAKD,IAAL,CAAUE,MAAV,GAAmB,EAAnB,GAAwB,IAAzC;AAEAC,IAAAA,WAAW,CAAC,MAAM,KAAKC,KAAL,EAAP,EAAqB,iBAAG,IAAH,CAArB,CAAX;AACD;;AAEDA,EAAAA,KAAK,GAAG;AACN;AACA,SAAKC,aAAL,GAFM,CAGN;;AACA,SAAKC,iBAAL;AACD;;AAED,QAAMD,aAAN,GAAsB;AACpB,QAAI,KAAKE,cAAL,IAAuB,CAAC,KAAKC,eAAL,CAAqBC,MAAjD,EAAyD;AACvD;AACD;;AAED,UAAMC,UAAU,GAAG,KAAKF,eAAL,CAAqBC,MAArB,IAA+B,KAAKR,SAApC,GAAgD,KAAKA,SAArD,GAAiE,KAAKO,eAAL,CAAqBC,MAAzG;AACA,UAAME,QAAQ,GAAG,KAAKH,eAAL,CAAqBI,MAArB,CAA4B,CAA5B,EAA+BF,UAA/B,CAAjB;AAEA,SAAKH,cAAL,GAAsB,KAAKP,IAAL,CACnBa,WADmB,CAElB,gBAFkB,EAGlBF,QAAQ,CAACG,GAAT,CAAaC,CAAC,IAAIC,gBAAEC,IAAF,CAAOF,CAAP,EAAU,OAAV,CAAlB,CAHkB,EAIlB,KAAKd,SAJa,EAMnBiB,KANmB,CAMbC,GAAG,IAAI;AACZ,WAAKrB,EAAL,CAAQsB,MAAR,CAAeC,WAAf,CAA2BF,GAA3B,EAAgCG,KAAhC,CAAuC,8DAAvC;AACA,YAAMC,eAAe,GAAGZ,QAAQ,CAC7BG,GADqB,CACjBC,CAAC,KAAK,EAAE,GAAGA,CAAL;AAAQS,QAAAA,KAAK,EAAET,CAAC,CAACS,KAAF,GAAUT,CAAC,CAACS,KAAF,GAAU,CAApB,GAAwB;AAAvC,OAAL,CADgB,EAErBC,MAFqB,CAEdV,CAAC,IAAIA,CAAC,CAACS,KAAF,GAAU,KAAKE,kBAFN,CAAxB;AAGA,WAAKlB,eAAL,CAAqBmB,IAArB,CAA0B,GAAGJ,eAA7B;AACD,KAZmB,EAanBK,OAbmB,CAaX,MAAM;AACb,WAAKrB,cAAL,GAAsBsB,SAAtB;AACD,KAfmB,CAAtB;AAgBD;;AAED,QAAMvB,iBAAN,GAA0B;AACxB,QAAI,KAAKwB,YAAL,IAAqB,CAACC,MAAM,CAACC,IAAP,CAAY,KAAKC,aAAjB,EAAgCxB,MAA1D,EAAkE;AAChE;AACD;;AAED,SAAKqB,YAAL,GAAoB,KAAK9B,IAAL,CACjBkC,WADiB,CACL,MAAMC,GAAN,IAAa;AACxB,YAAMC,OAAO,GAAG,EAAhB;;AAEA,WAAK,MAAMC,GAAX,IAAkB,KAAKJ,aAAvB,EAAsC;AACpC,cAAM,CAACK,cAAD,EAAiBC,MAAjB,EAAyBC,KAAzB,IAAkCH,GAAG,CAACI,KAAJ,CAAU,GAAV,CAAxC;AACA,cAAMC,KAAK,GAAG,KAAKT,aAAL,CAAmBI,GAAnB,CAAd;AAEA,cAAMM,KAAK,GAAG,KAAK3C,IAAL,CAAU,qBAAV,EACX4C,KADW,CACL;AAAEC,UAAAA,EAAE,EAAEP,cAAN;AAAsBC,UAAAA,MAAtB;AAA8BC,UAAAA;AAA9B,SADK,EAEXM,MAFW,CAEJ;AAAEC,UAAAA,aAAa,EAAEL;AAAjB,SAFI,EAGXM,WAHW,CAGCb,GAHD,CAAd;AAKAC,QAAAA,OAAO,CAACT,IAAR,CAAagB,KAAb;AACD;;AAED,WAAKV,aAAL,GAAqB,EAArB;AAEA,YAAMgB,OAAO,CAACC,GAAR,CAAYd,OAAZ,EACHe,IADG,CACEhB,GAAG,CAACiB,MADN,EAEHlC,KAFG,CAEGiB,GAAG,CAACkB,QAFP,CAAN;AAGD,KArBiB,EAsBjBzB,OAtBiB,CAsBT,MAAM;AACb,WAAKE,YAAL,GAAoBD,SAApB;AACD,KAxBiB,CAApB;AAyBD;;AAED,QAAMyB,WAAN,CAAkBf,MAAlB,EAAkCgB,IAAlC,EAAkD;AAChD,QAAI,CAACA,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAG,CAAC,MAAM,KAAKxD,KAAL,CAAWyD,eAAX,CAA2B,OAA3B,EAAoCjB,MAApC,CAAP,EAAoDkB,MAA3D;AACD;;AAED,QAAIC,QAAQ,GAAG,MAAf;;AAEA,QAAIH,IAAI,IAAIA,IAAI,CAACI,UAAjB,EAA6B;AAC3B,YAAM;AAAEC,QAAAA,UAAF;AAAcC,QAAAA;AAAd,UAA4BN,IAAI,CAACI,UAAvC;;AAEA,UAAIC,UAAU,IAAIC,SAAlB,EAA6B;AAC3BH,QAAAA,QAAQ,GAAI,GAAEE,UAAU,IAAI,EAAG,IAAGC,SAAS,IAAI,EAAG,EAAvC,CAAyCC,IAAzC,EAAX;AACD;AACF;;AAED,WAAO;AAAEJ,MAAAA,QAAF;AAAYK,MAAAA,UAAU,EAAE/C,gBAAEgD,GAAF,CAAMT,IAAN,EAAY,wBAAZ;AAAxB,KAAP;AACD;;AAED,QAAMU,UAAN,GAAmB;AACjB,WAAO,KAAKjE,IAAL,CACJkE,sBADI,CACmB,qBADnB,EAC0C,UAASC,KAAT,EAAgB;AAC7DA,MAAAA,KAAK,CAACC,UAAN,CAAiB,IAAjB,EAAuBC,OAAvB;AACAF,MAAAA,KAAK,CAACG,MAAN,CAAa,QAAb;AACAH,MAAAA,KAAK,CAACG,MAAN,CAAa,OAAb;AACAH,MAAAA,KAAK,CAACG,MAAN,CAAa,OAAb;AACAH,MAAAA,KAAK,CAACG,MAAN,CAAa,aAAb;AACAH,MAAAA,KAAK,CAACG,MAAN,CAAa,UAAb;AACAH,MAAAA,KAAK,CAACI,SAAN,CAAgB,YAAhB;AACAJ,MAAAA,KAAK,CAACI,SAAN,CAAgB,eAAhB,EAR6D,CAQ5B;;AACjCJ,MAAAA,KAAK,CAACI,SAAN,CAAgB,mBAAhB;AACAJ,MAAAA,KAAK,CAACI,SAAN,CAAgB,kBAAhB;AACD,KAZI,EAaJpB,IAbI,CAaC,MAAM;AACV,aAAO,KAAKnD,IAAL,CAAUkE,sBAAV,CAAiC,gBAAjC,EAAmD,UAASC,KAAT,EAAgB;AACxEA,QAAAA,KAAK,CAACG,MAAN,CAAa,IAAb,EAAmBD,OAAnB;AACAF,QAAAA,KAAK,CAACK,OAAN,CAAc,gBAAd;AACAL,QAAAA,KAAK,CAACG,MAAN,CAAa,iBAAb;AACAH,QAAAA,KAAK,CAACG,MAAN,CAAa,QAAb;AACAH,QAAAA,KAAK,CAACG,MAAN,CAAa,cAAb,EALwE,CAK3C;;AAC7BH,QAAAA,KAAK,CAACM,IAAN,CAAW,cAAX,EANwE,CAM7C;;AAC3BN,QAAAA,KAAK,CAACO,KAAN,CAAY,aAAZ,EAPwE,CAO7C;;AAC3BP,QAAAA,KAAK,CAACO,KAAN,CAAY,cAAZ,EARwE,CAQ5C;;AAC5BP,QAAAA,KAAK,CAACO,KAAN,CAAY,SAAZ;AACAP,QAAAA,KAAK,CAACG,MAAN,CAAa,WAAb;AACAH,QAAAA,KAAK,CAACG,MAAN,CAAa,YAAb;AACAH,QAAAA,KAAK,CAACI,SAAN,CAAgB,SAAhB;AACD,OAbM,CAAP;AAcD,KA5BI,CAAP;AA6BD;;AAED,QAAMI,iBAAN,CACEnC,KADF,EAEED,MAFF,EAGED,cAHF,EAIEsC,OAJF,EAKEC,eALF,EAMEtB,IANF,EAOE;AACA,UAAM;AAAEG,MAAAA,QAAF;AAAYK,MAAAA;AAAZ,QAA2B,MAAM,KAAKT,WAAL,CAAiBf,MAAjB,EAAyBgB,IAAzB,CAAvC;AACA,UAAM;AAAEuB,MAAAA,IAAF;AAAQL,MAAAA,IAAR;AAAcM,MAAAA,GAAd;AAAmBC,MAAAA;AAAnB,QAA4BJ,OAAlC;AAEA,UAAMK,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,UAAMC,OAAkB,GAAG;AACzBtC,MAAAA,EAAE,EAAEuC,cAAKC,EAAL,EADqB;AAEzB/C,MAAAA,cAFyB;AAGzBuC,MAAAA,eAHyB;AAIzBtC,MAAAA,MAJyB;AAKzB+C,MAAAA,SAAS,EAAE5B,QALc;AAMzBK,MAAAA,UANyB;AAOzBwB,MAAAA,YAAY,EAAET,IAPW;AAQzBU,MAAAA,YAAY,EAAEf,IARW;AASzBgB,MAAAA,WAAW,EAAE,KAAKzF,IAAL,CAAU0F,IAAV,CAAeC,GAAf,CAAmBZ,GAAnB,CATY;AAUzBa,MAAAA,YAAY,EAAE,KAAK5F,IAAL,CAAU0F,IAAV,CAAeC,GAAf,CAAmBX,IAAnB,CAVW;AAWzBJ,MAAAA,OAAO,EAAE,KAAK5E,IAAL,CAAU0F,IAAV,CAAeC,GAAf,CAAmBf,OAAnB,CAXgB;AAYzBiB,MAAAA,OAAO,EAAE,KAAK7F,IAAL,CAAU8F,IAAV,CAAeC,MAAf,CAAsBd,GAAtB;AAZgB,KAA3B;AAeA,SAAKzE,eAAL,CAAqBmB,IAArB,CAA0BwD,OAA1B;AACA,SAAKlD,aAAL,CAAoB,GAAEK,cAAe,IAAGC,MAAO,IAAGC,KAAM,EAAxD,IAA6D,KAAKxC,IAAL,CAAU8F,IAAV,CAAeC,MAAf,CAAsBd,GAAtB,CAA7D;AAEA,WAAO,EACL,GAAGE,OADE;AAELU,MAAAA,OAAO,EAAEZ,GAFJ;AAGLQ,MAAAA,WAAW,EAAEV,GAHR;AAILa,MAAAA,YAAY,EAAEZ,IAJT;AAKLJ,MAAAA,OAAO,EAAEA;AALJ,KAAP;AAOD;;AAED,QAAMoB,gBAAN,CAAuBC,OAAvB,EAAgCC,SAAhC,EAA2C5D,cAA3C,EAA2DsC,OAA3D,EAAoEC,eAApE,EAAqF;AACnF,UAAM;AAAEC,MAAAA,IAAF;AAAQL,MAAAA,IAAR;AAAcM,MAAAA,GAAd;AAAmBC,MAAAA;AAAnB,QAA4BJ,OAAlC;AAEA,UAAMK,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,UAAMC,OAAkB,GAAG;AACzBtC,MAAAA,EAAE,EAAEuC,cAAKC,EAAL,EADqB;AAEzB/C,MAAAA,cAAc,EAAEA,cAFS;AAGzBuC,MAAAA,eAHyB;AAIzBtC,MAAAA,MAAM,EAAEV,SAJiB;AAKzByD,MAAAA,SAAS,EAAEW,OALc;AAMzBlC,MAAAA,UAAU,EAAEmC,SANa;AAOzBX,MAAAA,YAAY,EAAET,IAPW;AAQzBU,MAAAA,YAAY,EAAEf,IARW;AASzBgB,MAAAA,WAAW,EAAE,KAAKzF,IAAL,CAAU0F,IAAV,CAAeC,GAAf,CAAmBZ,GAAnB,CATY;AAUzBa,MAAAA,YAAY,EAAE,KAAK5F,IAAL,CAAU0F,IAAV,CAAeC,GAAf,CAAmBX,IAAnB,CAVW;AAWzBJ,MAAAA,OAAO,EAAE,KAAK5E,IAAL,CAAU0F,IAAV,CAAeC,GAAf,CAAmBf,OAAnB,CAXgB;AAYzBiB,MAAAA,OAAO,EAAE,KAAK7F,IAAL,CAAU8F,IAAV,CAAeC,MAAf,CAAsBd,GAAtB;AAZgB,KAA3B;AAeA,SAAKzE,eAAL,CAAqBmB,IAArB,CAA0BwD,OAA1B;AAEA,WAAO,EACL,GAAGA,OADE;AAELU,MAAAA,OAAO,EAAEZ,GAFJ;AAGLQ,MAAAA,WAAW,EAAEV,GAHR;AAILa,MAAAA,YAAY,EAAEZ,IAJT;AAKLJ,MAAAA,OAAO,EAAEA;AALJ,KAAP;AAOD;;AAED,QAAMuB,kBAAN,CAAyB3D,KAAzB,EAAgCD,MAAhC,EAAwC;AAAE6D,IAAAA,yBAAyB,GAAG;AAA9B,MAAwC,EAAhF,EAAoF;AAClF,UAAMC,GAAG,GAAGC,IAAI,CAACC,MAAL,GACTC,QADS,GAETC,MAFS,CAEF,CAFE,EAEC,CAFD,CAAZ;AAGA,UAAMC,KAAK,GAAI,gBAAeL,GAAI,EAAlC;AAEA,UAAM,KAAKrG,IAAL,CAAU,qBAAV,EACH2G,MADG,CACI;AACNnE,MAAAA,KADM;AAEND,MAAAA,MAFM;AAGNqE,MAAAA,UAAU,EAAE,KAAK5G,IAAL,CAAU8F,IAAV,CAAeb,GAAf,EAHN;AAINlC,MAAAA,aAAa,EAAEqD,yBAAyB,GAAG,KAAKpG,IAAL,CAAU8F,IAAV,CAAeb,GAAf,EAAH,GAA0BpD,SAJ5D;AAKN6E,MAAAA;AALM,KADJ,EAQHvD,IARG,EAAN;AAUA,UAAM0D,YAAY,GAAG,MAAM,KAAK7G,IAAL,CAAU,qBAAV,EACxB4C,KADwB,CAClB;AAAE8D,MAAAA,KAAF;AAASnE,MAAAA,MAAT;AAAiBC,MAAAA;AAAjB,KADkB,EAExBsE,MAFwB,CAEjB,IAFiB,EAGxB3D,IAHwB,GAIxBa,GAJwB,CAIpB,CAJoB,CAA3B;AAMA,WAAO6C,YAAY,IAAIA,YAAY,CAAChE,EAApC;AACD;;AAED,QAAMkE,6BAAN,CAAoCvE,KAApC,EAAmDD,MAAnD,EAAmE;AAAE6D,IAAAA,yBAAyB,GAAG;AAA9B,MAAwC,EAA3G,EAA+G;AAC7G;AACA,UAAMY,MAAM,GAAG,MAAM,KAAKlH,EAAL,CAAQkH,MAAR,CAAeC,qBAAf,CAAqC,eAArC,EAAsDzE,KAAtD,CAArB;AAEA,UAAM0E,eAAe,GAAG,KAAKlH,IAAL,CAAU8F,IAAV,CAAeqB,OAAf,CACtB,eADsB,EAEtB,uBACGC,QADH,CACY,iBAAGJ,MAAM,CAACK,0BAAV,CADZ,EACmD,IADnD,EAEGC,MAFH,EAFsB,CAAxB;AAOA,UAAMT,YAAY,GAAG,MAAM,KAAK7G,IAAL,CAAU,qBAAV,EACxB8G,MADwB,CACjB,IADiB,EAExBS,YAFwB,CAEX,eAFW,EAGxBC,QAHwB,CAGf;AAAEjF,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAHe,EAIxBgF,QAJwB,CAIfN,eAJe,EAKxBO,OALwB,CAKhB,eALgB,EAKC,MALD,EAMxBC,KANwB,CAMlB,CANkB,EAOxBvE,IAPwB,GAQxBa,GARwB,CAQpB,CARoB,CAA3B;AAUA,WAAO6C,YAAY,GAAGA,YAAY,CAAChE,EAAhB,GAAqB,KAAKsD,kBAAL,CAAwB3D,KAAxB,EAA+BD,MAA/B,EAAuC;AAAE6D,MAAAA;AAAF,KAAvC,CAAxC;AACD;;AAED,QAAMuB,iBAAN,CAAwBpF,MAAxB,EAAwCC,KAAxC,EAAuD;AACrD,UAAMoF,aAAa,GAAI,MAAM,KAAK5H,IAAL,CAAU,qBAAV,EAC1B8G,MAD0B,CACnB,IADmB,EAE1BlE,KAF0B,CAEpB;AAAEL,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAFoB,EAG1BiF,OAH0B,CAGlB,eAHkB,EAGD,MAHC,EAI1BC,KAJ0B,CAIpB,GAJoB,EAK1BvE,IAL0B,EAA7B;AAOA,UAAM0E,eAAe,GAAGD,aAAa,CAAC9G,GAAd,CAAkBgH,CAAC,IAAIA,CAAC,CAACjF,EAAzB,CAAxB;AAEA,QAAIkF,YAAiB,GAAG,KAAK/H,IAAL,CACrBgI,IADqB,CAChB,gBADgB,EAErBC,QAFqB,CAEZ,KAAKjI,IAAL,CAAU+E,GAAV,CAAc,yBAAd,CAFY,EAGrB0C,OAHqB,CAGb,gBAHa,EAIrBA,OAJqB,CAIb,SAJa,EAIF,MAJE,CAAxB;;AAMA,QAAI,KAAKzH,IAAL,CAAUE,MAAd,EAAsB;AACpB,YAAMgI,gBAAgB,GAAG,KAAKlI,IAAL,CAAU,gBAAV,EACtBmI,OADsB,CACd,gBADc,EACIN,eADJ,EAEtBO,OAFsB,CAEd,gBAFc,EAGtBtB,MAHsB,CAGf,KAAK9G,IAAL,CAAU+E,GAAV,CAAc,sBAAd,CAHe,CAAzB;AAKAgD,MAAAA,YAAY,GAAG,KAAK/H,IAAL,CACZgI,IADY,CACP,gBADO,EAEZlB,MAFY,CAEL,GAFK,EAGZqB,OAHY,CAGJ,SAHI,EAGOD,gBAHP,CAAf;AAID;;AAED,WAAO,KAAKlI,IAAL,CACJgI,IADI,CACC,YAAoB;AACxB,WAAKA,IAAL,CAAU,qBAAV,EACGpF,KADH,CACS;AAAEL,QAAAA,MAAF;AAAUC,QAAAA;AAAV,OADT,EAEG6F,EAFH,CAEM,IAFN;AAGD,KALI,EAMJC,QANI,CAMKP,YAAY,CAACM,EAAb,CAAgB,IAAhB,CANL,EAM4B,mBAN5B,EAMiD,OANjD,EAOJZ,OAPI,CAOI,YAPJ,EAOkB,MAPlB,EAQJX,MARI,CASH,OATG,EAUH,UAVG,EAWH,gBAXG,EAYH,aAZG,EAaH,eAbG,EAcH,kBAdG,EAeH,iBAfG,EAgBH,iBAhBG,EAiBH,KAAK9G,IAAL,CAAU+E,GAAV,CAAc,gCAAd,CAjBG,EAkBH,KAAK/E,IAAL,CAAU+E,GAAV,CAAc,wCAAd,CAlBG,EAmBH,KAAK/E,IAAL,CAAU+E,GAAV,CAAc,+BAAd,CAnBG,CAAP;AAqBD;;AAED,QAAMwD,eAAN,CAAsBhG,MAAtB,EAA8BD,cAA9B,EAA8CE,KAA9C,EAAqD;AACnD,UAAMwE,MAAM,GAAI,MAAM,KAAKlH,EAAL,CAAQkH,MAAR,CAAeC,qBAAf,CAAqC,eAArC,EAAsDzE,KAAtD,CAAtB;AACA,UAAMgG,SAAc,GAAG;AAAEjG,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAvB;;AAEA,QAAIF,cAAc,IAAIA,cAAc,KAAK,MAAzC,EAAiD;AAC/CkG,MAAAA,SAAS,CAAC3F,EAAV,GAAeP,cAAf;AACD;;AAED,UAAMuE,YAAY,GAAG,MAAM,KAAK7G,IAAL,CAAU,qBAAV,EACxB4C,KADwB,CAClB4F,SADkB,EAExBrF,IAFwB,GAGxBa,GAHwB,CAGpB,CAHoB,CAA3B;;AAKA,QAAI,CAAC6C,YAAL,EAAmB;AACjB,aAAOhF,SAAP;AACD;;AAED,UAAM4G,QAAQ,GAAG,MAAM,KAAKC,uBAAL,CAA6BpG,cAA7B,EAA6C0E,MAAM,CAAC2B,kBAApD,CAAvB;AAEAF,IAAAA,QAAQ,CAACG,OAAT,CAAiBC,CAAC,IAAI;AACpB,aAAO9G,MAAM,CAAC+G,MAAP,CAAcD,CAAd,EAAiB;AACtBpD,QAAAA,WAAW,EAAE,KAAKzF,IAAL,CAAU0F,IAAV,CAAe1B,GAAf,CAAmB6E,CAAC,CAACpD,WAArB,CADS;AAEtBG,QAAAA,YAAY,EAAE,KAAK5F,IAAL,CAAU0F,IAAV,CAAe1B,GAAf,CAAmB6E,CAAC,CAACjD,YAArB,CAFQ;AAGtBhB,QAAAA,OAAO,EAAE,KAAK5E,IAAL,CAAU0F,IAAV,CAAe1B,GAAf,CAAmB6E,CAAC,CAACjE,OAArB;AAHa,OAAjB,CAAP;AAKD,KAND;AAQA,WAAO7C,MAAM,CAAC+G,MAAP,CAAc,EAAd,EAAkBjC,YAAlB,EAAgC;AACrC4B,MAAAA,QAAQ,EAAEzH,gBAAEyG,OAAF,CAAUgB,QAAV,EAAoB,CAAC,SAAD,CAApB,EAAiC,CAAC,KAAD,CAAjC;AAD2B,KAAhC,CAAP;AAGD;;AAED,QAAMC,uBAAN,CAA8BpG,cAA9B,EAA8CoF,KAA9C,EAA6DqB,MAA7D,EAA4F;AAC1F,QAAIpG,KAAK,GAAG,KAAK3C,IAAL,CAAU,gBAAV,EAA4B4C,KAA5B,CAAkC;AAAEN,MAAAA,cAAc,EAAEA;AAAlB,KAAlC,CAAZ;;AAEA,QAAIyG,MAAJ,EAAY;AACVpG,MAAAA,KAAK,GAAGA,KAAK,CAAC6E,QAAN,CAAe,IAAf,EAAqB,GAArB,EAA0BuB,MAA1B,CAAR;AACD;;AAED,WAAOpG,KAAK,CACTqG,QADI,CACK;AAAEzD,MAAAA,YAAY,EAAE;AAAhB,KADL,EAEJkC,OAFI,CAEI,SAFJ,EAEe,MAFf,EAGJC,KAHI,CAGEA,KAHF,CAAP;AAID;;AAED,QAAMuB,0BAAN,CAAiCC,MAAjC,EAAiDC,QAAjD,EAAqE;AACnE,WAAO,KAAKnJ,IAAL,CAAU,QAAV,EACJ8G,MADI,CACG,CAAC,iBAAD,EAAoB,UAApB,CADH,EAEJqB,OAFI,CAEI,iBAFJ,EAEuBgB,QAFvB,EAGJ3B,QAHI,CAGK;AAAE0B,MAAAA,MAAF;AAAUE,MAAAA,SAAS,EAAE;AAArB,KAHL,CAAP;AAID;;AAjW4B","sourceRoot":"/usr/src/app/modules/channel-excel/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport { Raw } from 'knex'\nimport _ from 'lodash'\nimport moment from 'moment'\nimport ms from 'ms'\nimport uuid from 'uuid'\n\nimport { Config } from '../config'\n\nimport { DBMessage } from './typings'\n\nexport default class WebchatDb {\n  private readonly MAX_RETRY_ATTEMPTS = 3\n  private knex: sdk.KnexExtended\n  private users: typeof sdk.users\n  private batchedMessages: DBMessage[] = []\n  private batchedConvos: Dic<Raw<any>> = {}\n  private messagePromise: Promise<void | number[]>\n  private convoPromise: Promise<void>\n  private batchSize: number\n\n  constructor(private bp: typeof sdk) {\n    this.users = bp.users\n    this.knex = bp['database'] // TODO Fixme\n\n    this.batchSize = this.knex.isLite ? 40 : 2000\n\n    setInterval(() => this.flush(), ms('1s'))\n  }\n\n  flush() {\n    // tslint:disable-next-line: no-floating-promises\n    this.flushMessages()\n    // tslint:disable-next-line: no-floating-promises\n    this.flushConvoUpdates()\n  }\n\n  async flushMessages() {\n    if (this.messagePromise || !this.batchedMessages.length) {\n      return\n    }\n\n    const batchCount = this.batchedMessages.length >= this.batchSize ? this.batchSize : this.batchedMessages.length\n    const elements = this.batchedMessages.splice(0, batchCount)\n\n    this.messagePromise = this.knex\n      .batchInsert(\n        'excel_messages',\n        elements.map(x => _.omit(x, 'retry')),\n        this.batchSize\n      )\n      .catch(err => {\n        this.bp.logger.attachError(err).error(`Couldn't store messages to the database. Re-queuing elements`)\n        const elementsToRetry = elements\n          .map(x => ({ ...x, retry: x.retry ? x.retry + 1 : 1 }))\n          .filter(x => x.retry < this.MAX_RETRY_ATTEMPTS)\n        this.batchedMessages.push(...elementsToRetry)\n      })\n      .finally(() => {\n        this.messagePromise = undefined\n      })\n  }\n\n  async flushConvoUpdates() {\n    if (this.convoPromise || !Object.keys(this.batchedConvos).length) {\n      return\n    }\n\n    this.convoPromise = this.knex\n      .transaction(async trx => {\n        const queries = []\n\n        for (const key in this.batchedConvos) {\n          const [conversationId, userId, botId] = key.split('_')\n          const value = this.batchedConvos[key]\n\n          const query = this.knex('excel_conversations')\n            .where({ id: conversationId, userId, botId })\n            .update({ last_heard_on: value })\n            .transacting(trx)\n\n          queries.push(query)\n        }\n\n        this.batchedConvos = {}\n\n        await Promise.all(queries)\n          .then(trx.commit)\n          .catch(trx.rollback)\n      })\n      .finally(() => {\n        this.convoPromise = undefined\n      })\n  }\n\n  async getUserInfo(userId: string, user: sdk.User) {\n    if (!user) {\n      user = (await this.users.getOrCreateUser('excel', userId)).result\n    }\n\n    let fullName = 'User'\n\n    if (user && user.attributes) {\n      const { first_name, last_name } = user.attributes\n\n      if (first_name || last_name) {\n        fullName = `${first_name || ''} ${last_name || ''}`.trim()\n      }\n    }\n\n    return { fullName, avatar_url: _.get(user, 'attributes.picture_url') }\n  }\n\n  async initialize() {\n    return this.knex\n      .createTableIfNotExists('excel_conversations', function(table) {\n        table.increments('id').primary()\n        table.string('userId')\n        table.string('botId')\n        table.string('title')\n        table.string('description')\n        table.string('logo_url')\n        table.timestamp('created_on')\n        table.timestamp('last_heard_on') // The last time the user interacted with the bot. Used for \"recent\" conversation\n        table.timestamp('user_last_seen_on')\n        table.timestamp('bot_last_seen_on')\n      })\n      .then(() => {\n        return this.knex.createTableIfNotExists('excel_messages', function(table) {\n          table.string('id').primary()\n          table.integer('conversationId')\n          table.string('incomingEventId')\n          table.string('userId')\n          table.string('message_type') // @ deprecated Remove in a future release (11.9)\n          table.text('message_text') // @ deprecated Remove in a future release (11.9)\n          table.jsonb('message_raw') // @ deprecated Remove in a future release (11.9)\n          table.jsonb('message_data') // @ deprecated Remove in a future release (11.9)\n          table.jsonb('payload')\n          table.string('full_name')\n          table.string('avatar_url')\n          table.timestamp('sent_on')\n        })\n      })\n  }\n\n  async appendUserMessage(\n    botId: string,\n    userId: string,\n    conversationId: number,\n    payload: any,\n    incomingEventId: string,\n    user?: sdk.User\n  ) {\n    const { fullName, avatar_url } = await this.getUserInfo(userId, user)\n    const { type, text, raw, data } = payload\n\n    const now = new Date()\n    const message: DBMessage = {\n      id: uuid.v4(),\n      conversationId,\n      incomingEventId,\n      userId,\n      full_name: fullName,\n      avatar_url,\n      message_type: type,\n      message_text: text,\n      message_raw: this.knex.json.set(raw),\n      message_data: this.knex.json.set(data),\n      payload: this.knex.json.set(payload),\n      sent_on: this.knex.date.format(now)\n    }\n\n    this.batchedMessages.push(message)\n    this.batchedConvos[`${conversationId}_${userId}_${botId}`] = this.knex.date.format(now)\n\n    return {\n      ...message,\n      sent_on: now,\n      message_raw: raw,\n      message_data: data,\n      payload: payload\n    }\n  }\n\n  async appendBotMessage(botName, botAvatar, conversationId, payload, incomingEventId) {\n    const { type, text, raw, data } = payload\n\n    const now = new Date()\n    const message: DBMessage = {\n      id: uuid.v4(),\n      conversationId: conversationId,\n      incomingEventId,\n      userId: undefined,\n      full_name: botName,\n      avatar_url: botAvatar,\n      message_type: type,\n      message_text: text,\n      message_raw: this.knex.json.set(raw),\n      message_data: this.knex.json.set(data),\n      payload: this.knex.json.set(payload),\n      sent_on: this.knex.date.format(now)\n    }\n\n    this.batchedMessages.push(message)\n\n    return {\n      ...message,\n      sent_on: now,\n      message_raw: raw,\n      message_data: data,\n      payload: payload\n    }\n  }\n\n  async createConversation(botId, userId, { originatesFromUserMessage = false } = {}) {\n    const uid = Math.random()\n      .toString()\n      .substr(2, 6)\n    const title = `Conversation ${uid}`\n\n    await this.knex('excel_conversations')\n      .insert({\n        botId,\n        userId,\n        created_on: this.knex.date.now(),\n        last_heard_on: originatesFromUserMessage ? this.knex.date.now() : undefined,\n        title\n      })\n      .then()\n\n    const conversation = await this.knex('excel_conversations')\n      .where({ title, userId, botId })\n      .select('id')\n      .then()\n      .get(0)\n\n    return conversation && conversation.id\n  }\n\n  async getOrCreateRecentConversation(botId: string, userId: string, { originatesFromUserMessage = false } = {}) {\n    // TODO: Lifetime config by bot\n    const config = await this.bp.config.getModuleConfigForBot('channel-excel', botId)\n\n    const recentCondition = this.knex.date.isAfter(\n      'last_heard_on',\n      moment()\n        .subtract(ms(config.recentConversationLifetime), 'ms')\n        .toDate()\n    )\n\n    const conversation = await this.knex('excel_conversations')\n      .select('id')\n      .whereNotNull('last_heard_on')\n      .andWhere({ userId, botId })\n      .andWhere(recentCondition)\n      .orderBy('last_heard_on', 'desc')\n      .limit(1)\n      .then()\n      .get(0)\n\n    return conversation ? conversation.id : this.createConversation(botId, userId, { originatesFromUserMessage })\n  }\n\n  async listConversations(userId: string, botId: string) {\n    const conversations = (await this.knex('excel_conversations')\n      .select('id')\n      .where({ userId, botId })\n      .orderBy('last_heard_on', 'desc')\n      .limit(100)\n      .then()) as any[]\n\n    const conversationIds = conversations.map(c => c.id)\n\n    let lastMessages: any = this.knex\n      .from('excel_messages')\n      .distinct(this.knex.raw('ON (\"conversationId\") *'))\n      .orderBy('conversationId')\n      .orderBy('sent_on', 'desc')\n\n    if (this.knex.isLite) {\n      const lastMessagesDate = this.knex('excel_messages')\n        .whereIn('conversationId', conversationIds)\n        .groupBy('conversationId')\n        .select(this.knex.raw('max(sent_on) as date'))\n\n      lastMessages = this.knex\n        .from('excel_messages')\n        .select('*')\n        .whereIn('sent_on', lastMessagesDate)\n    }\n\n    return this.knex\n      .from(function(this: any) {\n        this.from('excel_conversations')\n          .where({ userId, botId })\n          .as('wc')\n      })\n      .leftJoin(lastMessages.as('wm'), 'wm.conversationId', 'wc.id')\n      .orderBy('wm.sent_on', 'desc')\n      .select(\n        'wc.id',\n        'wc.title',\n        'wc.description',\n        'wc.logo_url',\n        'wc.created_on',\n        'wc.last_heard_on',\n        'wm.message_type',\n        'wm.message_text',\n        this.knex.raw('wm.full_name as message_author'),\n        this.knex.raw('wm.avatar_url as message_author_avatar'),\n        this.knex.raw('wm.sent_on as message_sent_on')\n      )\n  }\n\n  async getConversation(userId, conversationId, botId) {\n    const config = (await this.bp.config.getModuleConfigForBot('channel-excel', botId)) as Config\n    const condition: any = { userId, botId }\n\n    if (conversationId && conversationId !== 'null') {\n      condition.id = conversationId\n    }\n\n    const conversation = await this.knex('excel_conversations')\n      .where(condition)\n      .then()\n      .get(0)\n\n    if (!conversation) {\n      return undefined\n    }\n\n    const messages = await this.getConversationMessages(conversationId, config.maxMessagesHistory)\n\n    messages.forEach(m => {\n      return Object.assign(m, {\n        message_raw: this.knex.json.get(m.message_raw),\n        message_data: this.knex.json.get(m.message_data),\n        payload: this.knex.json.get(m.payload)\n      })\n    })\n\n    return Object.assign({}, conversation, {\n      messages: _.orderBy(messages, ['sent_on'], ['asc'])\n    })\n  }\n\n  async getConversationMessages(conversationId, limit: number, fromId?: string): Promise<any> {\n    let query = this.knex('excel_messages').where({ conversationId: conversationId })\n\n    if (fromId) {\n      query = query.andWhere('id', '<', fromId)\n    }\n\n    return query\n      .whereNot({ message_type: 'visit' })\n      .orderBy('sent_on', 'desc')\n      .limit(limit)\n  }\n\n  async getFeedbackInfoForEventIds(target: string, eventIds: string[]) {\n    return this.knex('events')\n      .select(['incomingEventId', 'feedback'])\n      .whereIn('incomingEventId', eventIds)\n      .andWhere({ target, direction: 'incoming' })\n  }\n}\n"]}