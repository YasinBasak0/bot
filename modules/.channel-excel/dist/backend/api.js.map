{"version":3,"sources":["api.ts"],"names":["ERR_USER_ID_REQ","ERR_MSG_TYPE","ERR_CONV_ID_REQ","ERR_BAD_LANGUAGE","USER_ID_MAX_LENGTH","SUPPORTED_MESSAGES","bp","db","asyncMiddleware","logger","globalConfig","config","getModuleConfig","diskStorage","multer","destination","fileUploadPath","limits","files","fileSize","filename","req","file","cb","userId","_","get","ext","path","extname","originalname","undefined","Date","getTime","upload","storage","uploadsUseS3","awsConfig","region","uploadsS3Region","credentials","accessKeyId","uploadsS3AWSAccessKey","secretAccessKey","uploadsS3AWSAccessSecret","s3","aws","S3","s3Storage","bucket","uploadsS3Bucket","contentType","multers3","AUTO_CONTENT_TYPE","cacheControl","acl","key","router","http","createRouterForBot","checkAuthentication","enableJsonBodyParser","perBotCache","apicache","options","appendKey","method","params","botId","statusCodes","include","middleware","res","security","getModuleConfigForBot","botInfo","bots","getBotById","sendStatus","send","showBotInfoPage","infoPage","enabled","name","description","details","languages","extraStylesheet","post","extractExternalToken","validateUserId","status","user","users","getOrCreateUser","payload","body","conversationId","query","parseInt","includes","type","timezone","language","isValidTimezone","isNumber","isValidLanguage","length","newAttributes","Object","getOwnPropertyNames","updateAttributes","getOrCreateRecentConversation","originatesFromUserMessage","sendNewMessage","headers","authorization","result","single","text","location","url","originalName","mime","mimetype","size","conversation","getConversation","conversations","listConversations","startNewConvoOnTimeout","recentConversationLifetime","test","useDebugger","isString","maxMessageLength","Error","sanitizedPayload","sensitive","Array","isArray","omit","event","IO","Event","channel","direction","target","threadId","debugger","message","appendUserMessage","id","realtime","sendPayload","RealTimePayload","forVisitor","events","sendEvent","eventId","feedback","saveUserFeedback","err","eventIds","getFeedbackInfoForEventIds","sessionId","dialog","createId","deleteSession","convoId","createConversation","reference","indexOf","slice","lastIndexOf","signature","verifySignature","getMessageSignature","error","attributes","preferredLanguage","bot","validLanguage","getMessageContent","message_data","wrappedText","message_text","convertToTxtFile","messages","timeFormat","fullName","metadata","title","created_on","format","messagesAsTxt","map","message_type","userName","full_name","sent_on","join","txt"],"mappings":"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","sourceRoot":"/usr/src/app/modules/channel-excel/src/backend","sourcesContent":["import apicache from 'apicache'\nimport aws from 'aws-sdk'\nimport * as sdk from 'botpress/sdk'\nimport { asyncMiddleware as asyncMw, BPRequest } from 'common/http'\nimport { Response } from 'express'\nimport _ from 'lodash'\nimport moment from 'moment'\nimport multer from 'multer'\nimport multers3 from 'multer-s3'\nimport path from 'path'\n\nimport { Config } from '../config'\n\nimport Database from './db'\n\nconst ERR_USER_ID_REQ = '`userId` is required and must be valid'\nconst ERR_MSG_TYPE = '`type` is required and must be valid'\nconst ERR_CONV_ID_REQ = '`conversationId` is required and must be valid'\nconst ERR_BAD_LANGUAGE = '`language` is required and must be valid'\n\nconst USER_ID_MAX_LENGTH = 40\nconst SUPPORTED_MESSAGES = [\n  'text',\n  'quick_reply',\n  'form',\n  'login_prompt',\n  'visit',\n  'request_start_conversation',\n  'postback'\n]\n\nexport default async (bp: typeof sdk, db: Database) => {\n  const asyncMiddleware = asyncMw(bp.logger)\n  const globalConfig = (await bp.config.getModuleConfig('channel-excel')) as Config\n\n  const diskStorage = multer.diskStorage({\n    destination: globalConfig.fileUploadPath,\n    limits: {\n      files: 1,\n      fileSize: 5242880 // 5MB\n    },\n    filename: function(req, file, cb) {\n      const userId = _.get(req, 'params.userId') || 'anonymous'\n      const ext = path.extname(file.originalname)\n\n      cb(undefined, `${userId}_${new Date().getTime()}${ext}`)\n    }\n  })\n\n  let upload = multer({ storage: diskStorage })\n\n  if (globalConfig.uploadsUseS3) {\n    /*\n      You can override AWS's default settings here. Example:\n      { region: 'us-east-1', apiVersion: '2014-10-01', credentials: {...} }\n     */\n    const awsConfig = {\n      region: globalConfig.uploadsS3Region,\n      credentials: {\n        accessKeyId: globalConfig.uploadsS3AWSAccessKey,\n        secretAccessKey: globalConfig.uploadsS3AWSAccessSecret\n      }\n    }\n\n    if (!awsConfig.credentials.accessKeyId && !awsConfig.credentials.secretAccessKey) {\n      delete awsConfig.credentials\n    }\n\n    if (!awsConfig.region) {\n      delete awsConfig.region\n    }\n\n    const s3 = new aws.S3(awsConfig)\n    const s3Storage = multers3({\n      s3: s3,\n      bucket: globalConfig.uploadsS3Bucket || 'uploads',\n      contentType: multers3.AUTO_CONTENT_TYPE,\n      cacheControl: 'max-age=31536000', // one year caching\n      acl: 'public-read',\n      key: function(req, file, cb) {\n        const userId = _.get(req, 'params.userId') || 'anonymous'\n        const ext = path.extname(file.originalname)\n\n        cb(undefined, `${userId}_${new Date().getTime()}${ext}`)\n      }\n    })\n\n    upload = multer({ storage: s3Storage })\n  }\n\n  const router = bp.http.createRouterForBot('channel-excel', { checkAuthentication: false, enableJsonBodyParser: true })\n  const perBotCache = apicache.options({\n    appendKey: req => req.method + ' for bot ' + req.params && req.params.botId,\n    statusCodes: { include: [200] }\n  }).middleware\n\n  router.get(\n    '/botInfo',\n    perBotCache('1 minute'),\n    asyncMiddleware(async (req: BPRequest, res: Response) => {\n      const { botId } = req.params\n      const security = ((await bp.config.getModuleConfig('channel-excel')) as Config).security // usage of global because a user could overwrite bot scoped configs\n      const config = (await bp.config.getModuleConfigForBot('channel-excel', botId)) as Config\n      const botInfo = await bp.bots.getBotById(botId)\n\n      if (!botInfo) {\n        return res.sendStatus(404)\n      }\n\n      res.send({\n        showBotInfoPage: (config.infoPage && config.infoPage.enabled) || config.showBotInfoPage,\n        name: botInfo.name,\n        description: (config.infoPage && config.infoPage.description) || botInfo.description,\n        details: botInfo.details,\n        languages: botInfo.languages,\n        extraStylesheet: config.extraStylesheet,\n        security\n      })\n    })\n  )\n\n  // ?conversationId=xxx (optional)\n  router.post(\n    '/messages/:userId',\n    bp.http.extractExternalToken,\n    asyncMiddleware(async (req: BPRequest, res: Response) => {\n      const { botId, userId = undefined } = req.params\n\n      if (!validateUserId(userId)) {\n        return res.status(400).send(ERR_USER_ID_REQ)\n      }\n\n      const user = await bp.users.getOrCreateUser('excel', userId, botId)\n      const payload = req.body || {}\n\n      let { conversationId = undefined } = req.query || {}\n      conversationId = conversationId && parseInt(conversationId)\n\n      if (!SUPPORTED_MESSAGES.includes(payload.type)) {\n        // TODO: Support files\n        return res.status(400).send(ERR_MSG_TYPE)\n      }\n\n      if (payload.type === 'visit') {\n        const { timezone, language } = payload\n        const isValidTimezone = _.isNumber(timezone) && timezone >= -12 && timezone <= 14 && timezone % 0.5 === 0\n        const isValidLanguage = language.length < 4 && !_.get(user, 'result.attributes.language')\n\n        const newAttributes = {\n          ...(isValidTimezone && { timezone }),\n          ...(isValidLanguage && { language })\n        }\n\n        if (Object.getOwnPropertyNames(newAttributes).length) {\n          await bp.users.updateAttributes('excel', userId, newAttributes)\n        }\n      }\n\n      if (!conversationId) {\n        conversationId = await db.getOrCreateRecentConversation(botId, userId, { originatesFromUserMessage: true })\n      }\n\n      await sendNewMessage(\n        botId,\n        userId,\n        conversationId,\n        payload,\n        req.credentials,\n        !!req.headers.authorization,\n        user.result\n      )\n\n      return res.sendStatus(200)\n    })\n  )\n\n  // ?conversationId=xxx (required)\n  router.post(\n    '/messages/:userId/files',\n    upload.single('file'),\n    bp.http.extractExternalToken,\n    asyncMiddleware(async (req: BPRequest & any, res: Response) => {\n      const { botId = undefined, userId = undefined } = req.params || {}\n\n      if (!validateUserId(userId)) {\n        return res.status(400).send(ERR_USER_ID_REQ)\n      }\n\n      await bp.users.getOrCreateUser('excel', userId, botId) // Just to create the user if it doesn't exist\n\n      let { conversationId = undefined } = req.query || {}\n      conversationId = conversationId && parseInt(conversationId)\n\n      if (!conversationId) {\n        return res.status(400).send(ERR_CONV_ID_REQ)\n      }\n\n      const payload = {\n        text: `Uploaded a file [${req.file.originalname}]`,\n        type: 'file',\n        storage: req.file.location ? 's3' : 'local',\n        url: req.file.location || req.file.path || undefined,\n        name: req.file.filename,\n        originalName: req.file.originalname,\n        mime: req.file.contentType || req.file.mimetype,\n        size: req.file.size\n      }\n\n      await sendNewMessage(botId, userId, conversationId, payload, req.credentials)\n\n      return res.sendStatus(200)\n    })\n  )\n\n  router.get('/conversations/:userId/:conversationId', async (req: BPRequest, res: Response) => {\n    const { userId, conversationId, botId } = req.params\n\n    if (!validateUserId(userId)) {\n      return res.status(400).send(ERR_USER_ID_REQ)\n    }\n\n    const conversation = await db.getConversation(userId, conversationId, botId)\n\n    return res.send(conversation)\n  })\n\n  router.get('/conversations/:userId', async (req: BPRequest, res: Response) => {\n    const { botId = undefined, userId = undefined } = req.params || {}\n\n    if (!validateUserId(userId)) {\n      return res.status(400).send(ERR_USER_ID_REQ)\n    }\n\n    await bp.users.getOrCreateUser('excel', userId, botId)\n\n    const conversations = await db.listConversations(userId, botId)\n\n    const config = await bp.config.getModuleConfigForBot('channel-excel', botId)\n\n    return res.send({\n      conversations: [...conversations],\n      startNewConvoOnTimeout: config.startNewConvoOnTimeout,\n      recentConversationLifetime: config.recentConversationLifetime\n    })\n  })\n\n  function validateUserId(userId: string) {\n    if (!userId || userId.length > USER_ID_MAX_LENGTH) {\n      return false\n    }\n\n    return /[a-z0-9-_]+/i.test(userId)\n  }\n\n  async function sendNewMessage(\n    botId: string,\n    userId: string,\n    conversationId,\n    payload,\n    credentials: any,\n    useDebugger?: boolean,\n    user?: sdk.User\n  ) {\n    const config = await bp.config.getModuleConfigForBot('channel-excel', botId)\n\n    if (\n      (!payload.text || !_.isString(payload.text) || payload.text.length > config.maxMessageLength) &&\n      payload.type != 'postback'\n    ) {\n      throw new Error(`Text must be a valid string of less than ${config.maxMessageLength} chars`)\n    }\n\n    let sanitizedPayload = payload\n    if (payload.sensitive) {\n      const sensitive = Array.isArray(payload.sensitive) ? payload.sensitive : [payload.sensitive]\n      sanitizedPayload = _.omit(payload, [...sensitive, 'sensitive'])\n    }\n\n    const event = bp.IO.Event({\n      botId,\n      channel: 'excel',\n      direction: 'incoming',\n      payload,\n      target: userId,\n      threadId: conversationId,\n      type: payload.type,\n      credentials\n    })\n\n    if (useDebugger) {\n      event.debugger = true\n    }\n\n    const message = await db.appendUserMessage(botId, userId, conversationId, sanitizedPayload, event.id, user)\n    bp.realtime.sendPayload(bp.RealTimePayload.forVisitor(userId, 'webchat.message', message))\n\n    await bp.events.sendEvent(event)\n  }\n\n  router.post(\n    '/events/:userId',\n    bp.http.extractExternalToken,\n    asyncMiddleware(async (req: BPRequest, res: Response) => {\n      const payload = req.body || {}\n      const { botId = undefined, userId = undefined } = req.params || {}\n      await bp.users.getOrCreateUser('excel', userId, botId)\n      const conversationId = await db.getOrCreateRecentConversation(botId, userId, { originatesFromUserMessage: true })\n\n      const event = bp.IO.Event({\n        botId,\n        channel: 'excel',\n        direction: 'incoming',\n        target: userId,\n        threadId: conversationId,\n        type: payload.type,\n        payload,\n        credentials: req.credentials\n      })\n\n      await bp.events.sendEvent(event)\n      res.sendStatus(200)\n    })\n  )\n\n  router.post(\n    '/saveFeedback',\n    bp.http.extractExternalToken,\n    asyncMiddleware(async (req: BPRequest, res: Response) => {\n      const { eventId, target, feedback } = req.body\n\n      if (!target || !eventId || !feedback) {\n        return res.status(400).send('Missing required fields')\n      }\n\n      try {\n        await bp.events.saveUserFeedback(eventId, target, feedback, 'qna')\n        res.sendStatus(200)\n      } catch (err) {\n        res.status(400).send(err)\n      }\n    })\n  )\n\n  router.post(\n    '/feedbackInfo',\n    bp.http.extractExternalToken,\n    asyncMiddleware(async (req: BPRequest, res: Response) => {\n      const { target, eventIds } = req.body\n\n      if (!target || !eventIds) {\n        return res.status(400).send('Missing required fields')\n      }\n\n      res.send(await db.getFeedbackInfoForEventIds(target, eventIds))\n    })\n  )\n\n  router.post(\n    '/conversations/:userId/:conversationId/reset',\n    bp.http.extractExternalToken,\n    asyncMiddleware(async (req: BPRequest, res: Response) => {\n      const { botId, userId, conversationId } = req.params\n      await bp.users.getOrCreateUser('excel', userId, botId)\n\n      const payload = {\n        text: `Conversation Reset`,\n        type: 'session_reset'\n      }\n\n      await sendNewMessage(botId, userId, conversationId, payload, req.credentials)\n\n      const sessionId = await bp.dialog.createId({ botId, target: userId, threadId: conversationId, channel: 'excel' })\n      await bp.dialog.deleteSession(sessionId)\n      res.sendStatus(200)\n    })\n  )\n\n  router.post('/conversations/:userId/new', async (req: BPRequest, res: Response) => {\n    const { userId, botId } = req.params\n    const convoId = await db.createConversation(botId, userId)\n    res.send({ convoId })\n  })\n\n  router.post('/conversations/:userId/:conversationId/reference/:reference', async (req: BPRequest, res: Response) => {\n    try {\n      const { botId, userId, reference } = req.params\n      let { conversationId } = req.params\n\n      await bp.users.getOrCreateUser('excel', userId, botId)\n\n      if (typeof reference !== 'string' || !reference.length || reference.indexOf('=') === -1) {\n        throw new Error('Invalid reference')\n      }\n\n      if (!conversationId || conversationId == 'null') {\n        conversationId = await db.getOrCreateRecentConversation(botId, userId, { originatesFromUserMessage: true })\n      }\n\n      const message = reference.slice(0, reference.lastIndexOf('='))\n      const signature = reference.slice(reference.lastIndexOf('=') + 1)\n\n      const verifySignature = await bp.security.getMessageSignature(message)\n      if (verifySignature !== signature) {\n        throw new Error('Bad reference signature')\n      }\n\n      const payload = {\n        text: message,\n        signature: signature,\n        type: 'session_reference'\n      }\n\n      const event = bp.IO.Event({\n        botId,\n        channel: 'excel',\n        direction: 'incoming',\n        target: userId,\n        threadId: conversationId,\n        type: payload.type,\n        payload,\n        credentials: req['credentials']\n      })\n\n      await bp.events.sendEvent(event)\n      res.sendStatus(200)\n    } catch (error) {\n      res.status(500).send({ message: error.message })\n    }\n  })\n\n  router.get('/preferences/:userId', async (req: BPRequest, res: Response) => {\n    const { userId, botId } = req.params\n    const { result } = await bp.users.getOrCreateUser('excel', userId, botId)\n\n    return res.send({ language: result.attributes.language })\n  })\n\n  router.post('/preferences/:userId', async (req: BPRequest, res: Response) => {\n    const { userId, botId } = req.params\n    const payload = req.body || {}\n    const preferredLanguage = payload.language\n    const bot = await bp.bots.getBotById(botId)\n    const validLanguage = bot.languages.includes(preferredLanguage)\n    if (!validLanguage) {\n      return res.status(400).send(ERR_BAD_LANGUAGE)\n    }\n\n    await bp.users.updateAttributes('excel', userId, {\n      language: preferredLanguage\n    })\n\n    return res.sendStatus(200)\n  })\n\n  const getMessageContent = (message, type) => {\n    const { payload } = message\n\n    if (type === 'file') {\n      return (payload && payload.url) || message.message_data.url\n    }\n\n    const wrappedText = _.get(payload, 'wrapped.text')\n    return (payload && payload.text) || message.message_text || wrappedText || `Event (${type})`\n  }\n\n  const convertToTxtFile = async conversation => {\n    const { messages } = conversation\n    const { result: user } = await bp.users.getOrCreateUser('excel', conversation.userId)\n    const timeFormat = 'MM/DD/YY HH:mm'\n    const fullName = `${user.attributes['first_name'] || ''} ${user.attributes['last_name'] || ''}`\n    const metadata = `Title: ${conversation.title}\\r\\nCreated on: ${moment(conversation.created_on).format(\n      timeFormat\n    )}\\r\\nUser: ${fullName}\\r\\n-----------------\\r\\n`\n\n    const messagesAsTxt = messages.map(message => {\n      const type = (message.payload && message.payload.type) || message.message_type\n      if (type === 'session_reset') {\n        return ''\n      }\n      const userName = message.full_name.indexOf('undefined') > -1 ? 'User' : message.full_name\n      return `[${moment(message.sent_on).format(timeFormat)}] ${userName}: ${getMessageContent(message, type)}\\r\\n`\n    })\n\n    return [metadata, ...messagesAsTxt].join('')\n  }\n\n  router.get('/conversations/:userId/:conversationId/download/txt', async (req: BPRequest, res: Response) => {\n    const { userId, conversationId, botId } = req.params\n\n    if (!validateUserId(userId)) {\n      return res.status(400).send(ERR_USER_ID_REQ)\n    }\n\n    const conversation = await db.getConversation(userId, conversationId, botId)\n    const txt = await convertToTxtFile(conversation)\n\n    res.send({ txt, name: `${conversation.title}.txt` })\n  })\n}\n"]}