{"version":3,"sources":["socket.ts"],"names":["outgoingTypes","bp","db","config","botName","botAvatarUrl","undefined","events","registerMiddleware","description","direction","handler","outgoingHandler","name","order","event","next","channel","userId","target","conversationId","threadId","getOrCreateRecentConversation","botId","payload","metadata","applyChannelEffects","type","messageType","_","includes","logger","warn","standardTypes","console","log","sendTyping","RealTimePayload","forVisitor","realtime","sendPayload","message","appendBotMessage","incomingEventId","typing","parseTyping","value","timeInMs","__buttons","__typing","__trimText","__markdown","__dropdown","__collectFeedback","isNaN","trimLength","markdown","collectFeedback","module","component","quick_replies","wrapped","omit","isArray","options","Math","max"],"mappings":"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","sourceRoot":"/usr/src/app/modules/channel-excel/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport _ from 'lodash'\nimport path from 'path'\n\nimport Database from './db'\nimport { convertPayload } from './renderer'\n\nconst outgoingTypes = [\n  'text',\n  'typing',\n  'login_prompt',\n  'file',\n  'carousel',\n  'custom',\n  'data',\n  'select_range',\n  'set_range',\n  'set_suggestions',\n  'execute_code'\n]\n\nexport default async (bp: typeof sdk, db: Database) => {\n  const config: any = {} // FIXME\n  const { botName = 'Bot', botAvatarUrl = undefined } = config || {} // FIXME\n\n  bp.events.registerMiddleware({\n    description:\n      'Sends out messages that targets platform = webchat.' +\n      ' This middleware should be placed at the end as it swallows events once sent.',\n    direction: 'outgoing',\n    handler: outgoingHandler,\n    name: 'excel.sendMessages',\n    order: 100\n  })\n\n  async function outgoingHandler(event: sdk.IO.OutgoingEvent, next: sdk.IO.MiddlewareNextCallback) {\n    if (event.channel !== 'excel') {\n      return next()\n    }\n\n    const userId = event.target\n    const conversationId = event.threadId || (await db.getOrCreateRecentConversation(event.botId, userId))\n\n    event.payload = convertPayload(event.payload)\n\n    if (event.payload.metadata) {\n      event.payload = await applyChannelEffects(event, userId, conversationId)\n    }\n\n    event.type = event.payload.type\n\n    const messageType = event.type === 'default' ? 'text' : event.type\n\n    if (!_.includes(outgoingTypes, messageType)) {\n      bp.logger.warn(`Unsupported event type: ${messageType}`)\n      return next(undefined, true)\n    }\n\n    const standardTypes = [\n      'text',\n      'carousel',\n      'custom',\n      'file',\n      'login_prompt',\n      'select_range',\n      'set_range',\n      'set_suggestions',\n      'execute_code'\n    ]\n\n    if (!event.payload.type) {\n      event.payload.type = messageType\n    }\n    console.log('outgoing event: ')\n    console.log(event)\n    if (messageType === 'typing') {\n      await sendTyping(event, userId, conversationId)\n    } else if (messageType === 'data') {\n      const payload = bp.RealTimePayload.forVisitor(userId, 'webchat.data', event.payload)\n      bp.realtime.sendPayload(payload)\n    } else if (standardTypes.includes(messageType)) {\n      const message = await db.appendBotMessage(\n        (event.payload || {}).botName || botName,\n        (event.payload || {}).botAvatarUrl || botAvatarUrl,\n        conversationId,\n        event.payload,\n        event.incomingEventId\n      )\n      bp.realtime.sendPayload(bp.RealTimePayload.forVisitor(userId, 'webchat.message', message))\n    } else {\n      bp.logger.warn(`Message type \"${messageType}\" not implemented yet`)\n    }\n\n    next(undefined, false)\n    // TODO Make official API (BotpressAPI.events.updateStatus(event.id, 'done'))\n  }\n\n  const sendTyping = async (event, userId, conversationId) => {\n    const typing = parseTyping(event.payload.value)\n    const payload = bp.RealTimePayload.forVisitor(userId, 'webchat.typing', { timeInMs: typing, conversationId })\n    // Don't store \"typing\" in DB\n    bp.realtime.sendPayload(payload)\n    // await Promise.delay(typing)\n  }\n\n  const applyChannelEffects = async (event: sdk.IO.OutgoingEvent, userId, conversationId) => {\n    let payload = event.payload\n    console.log(payload)\n    const {\n      __buttons,\n      __typing,\n      __trimText,\n      __markdown,\n      __dropdown,\n      __collectFeedback\n    } = payload.metadata as sdk.Content.Metadata\n\n    if (__typing) {\n      await sendTyping(event, userId, conversationId)\n    }\n\n    if (__trimText && !isNaN(__trimText)) {\n      payload.trimLength = __trimText\n    }\n\n    if (__markdown) {\n      payload.markdown = true\n    }\n\n    if (__collectFeedback) {\n      payload.collectFeedback = true\n    }\n\n    if (__buttons) {\n      payload = {\n        type: 'custom',\n        module: 'channel-excel',\n        component: 'QuickReplies',\n        quick_replies: __buttons,\n        wrapped: {\n          type: event.type,\n          ..._.omit(event.payload, 'quick_replies')\n        }\n      }\n    }\n\n    if (__dropdown) {\n      payload = {\n        type: 'custom',\n        module: 'extensions',\n        component: 'Dropdown',\n        ...(_.isArray(__dropdown) ? { options: __dropdown } : __dropdown),\n        wrapped: {\n          type: event.type,\n          ..._.omit(event.payload, 'options')\n        }\n      }\n    }\n\n    return payload\n  }\n}\n\nfunction parseTyping(typing) {\n  if (isNaN(typing)) {\n    return 500\n  }\n\n  return Math.max(typing, 500)\n}\n"]}